<?php
// $Id$

/**
 * @file
 * Allows users to create public shopping/wish lists.
 *
 * Initial development by Joe Turgeon. http://arithmetric.com
 * Some code adapted from Ubercart uc_cart core module.
 * Development sponsored by Sundays Energy. http://www.sundaysenergy.com
 */


/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_wishlist_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/store/wishlist',
      'title' => t('Wish lists'),
      'callback' => 'uc_wishlist_admin_manage',
      'access' => user_access('administer store'),
      'description' => t('Configure the wish list settings.'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/store/wishlist/manage',
      'title' => t('Manage'),
      'callback' => 'uc_wishlist_admin_manage',
      'access' => user_access('administer store'),
      'description' => t("Manage user's wish lists."),
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/store/wishlist/settings',
      'title' => t('Settings'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_wishlist_admin_settings'),
      'access' => user_access('administer store'),
      'description' => t('Wish list settings'),
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'wishlist',
      'title' => t('Wish list'),
      'description' => t('View or modify the contents of your wish list.'),
      'callback' => 'uc_wishlist_view',
      'access' => user_access('access content'),
    );
    $items[] = array(
      'path' => 'wishlist/search',
      'title' => t('Find a wish list'),
      'description' => t("Search for a user's wish list."),
      'callback' => 'uc_wishlist_search',
      'access' => user_access('access content'),
    );
    $items[] = array(
      'path' => 'wishlists',
      'title' => t('Wish lists'),
      'description' => t('View wish lists of users.'),
      'callback' => 'uc_wishlist_wishlists',
      'access' => user_access('administer wishlists'),
    );
  }

  return $items;
}

function uc_wishlist_wishlists()
{
  $arg3 = arg(3);
  if (is_numeric($arg3)) {
    $defwid = $arg3;
    if (arg(4)=='delete') {
      if (arg(5)=='confirm') {
        db_query('DELETE FROM {uc_wishlists} WHERE wid = %d', $defwid);
        db_query('DELETE FROM {uc_wishlist_products} WHERE wid = %d', $defwid);
        drupal_set_message(t('Wish list deleted.'));
        drupal_goto('wishlists');
      }
      else {
        drupal_set_message(t('Are you sure you want to delete this wish list? Please click !here to confirm.', array('!here' => l(t('here'), 'wishlists/'. $defwid .'/delete/confirm'))));
      }
    }
  }

  $header = array(
    array('data' => t('User'), 'field' => 'uid'),
    array('data' => t('Title'), 'field' => 'title'),
    array('data' => t('Expiration date'), 'field' => 'date'),
    array('data' => t('Status'))
  );

  if ($defwid) {
    $res = db_query('SELECT * FROM {uc_wishlists} WHERE wid = %d', $defwid);
  }
  else {
    $q = tablesort_sql($header);
    $res = db_query('SELECT * FROM {uc_wishlists}'. $q);
  }
  
  while ($wishlist = db_fetch_object($res)) {
    if ($wishlist->date < time()) {
      $status = t('Expired');
    }
    else {
      $status = t('Ok');
    }
    $op = $status .' | '. l(t('Delete'), 'wishlists/'. $wishlist->wid .'/delete');
    $rows[] = array(
      theme_username(user_load(array('uid' => $wishlist->uid))),
      l($wishlist->title, 'wishlist/'. $wishlist->wid),
      format_date($wishlist->date),
      $op
    );
  }
  
  return theme('table', $header, $rows);
}

/**
 * Implementation of hook_perm().
 */
function uc_wishlist_perm() {
  return array('administer wishlists');
}

/*
 * Implementation of hook_search().
 * uc_wishlist_search provides wishlist/search page to list and search 
 * for customers with wish lists.
 * TODO: separate hook_search from custom search page
 */
function uc_wishlist_search($form_id = '', $form_values = NULL) {
  global $user;
  
  if ($form_id == 'status' || $form_id == 'reset' || $form_id == 'admin') {
    return;
  }
  if ($form_id == 'name') {
    return t('Wish lists');
  }

  if ($form_id == 'search') {
    $query = $form_values;
  }
  else {
    $query = arg(2);
  }

  if ($query || $form_id == 'search') {
    $links = array();
    // check for user, wish list title, or address (first or last name,
    // company) matches
    $res = db_query("SELECT DISTINCT w.wid, w.title FROM {uc_wishlists} AS w JOIN {users} AS u ON w.uid = u.uid WHERE u.name LIKE '%%%s%%' OR w.title LIKE '%%%s%%' OR w.address LIKE '%%firstname%%%s%%addr1%%' ORDER BY w.title", $query, $query, $query);
    while ($obj = db_fetch_object($res)) {
      $links[] = array(
        'title' => $obj->title,
        'href' => 'wishlist/'. $obj->wid,
      );
    }
  }
  else {
    $res = db_query("SELECT wid, title FROM {uc_wishlists} ORDER BY title");
    while ($obj = db_fetch_object($res)) {
      $links[] = array(
        'title' => $obj->title,
        'href' => 'wishlist/'. $obj->wid,
      );
    }
  }

  if ($form_id == 'search') {
    $output = array();
    foreach ($links as $link) {
      $output[] = array(
        'link' => url($link['href']),
        'type' => 'Wish List',
        'title' => $link['title']
      );
    }
  }
  else {
    if (count($links)>0) {
      $output = theme_links($links, array('class' => 'links wishlist'));
    }
    else {
      $output = t('No wish lists were found that match your search criteria.');
    }
    drupal_add_css(drupal_get_path('module', 'uc_wishlist') .'/uc_wishlist_search.css');
    $output .= drupal_get_form('uc_wishlist_search_form');

    // generate link to 'create or manage your wish list'
    $path = 'wishlist';
    $query = NULL;
    if (!$user->uid && !variable_get('uc_wishlist_allow_anonymous', 0)) {
      $path = 'user';
      $query = 'destination=wishlist';
    }
    $output .= '<br/><div class="wishlist">';
    $output .= l(t('Click here to create or manage your wish list.'), $path, array(), $query);
    $output .= '</div>';
  }

  return $output;
}

function uc_wishlist_search_form() {
  $form['query'] = array(
    '#type' => 'textfield',
    '#title' => 'Search by name',
    '#size' => 20,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
  );
  return $form;
}

function uc_wishlist_search_form_submit($form_id, $form_values) {
  return 'wishlist/search/'. drupal_urlencode($form_values['query']);
}

/**
 * Implementation of hook_cron().
 */
function uc_wishlist_cron() {
// TODO: add clean up of anonymous wish lists
}

/**
 * Implementation of hook_block().
 */
function uc_wishlist_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Wish List');
    $blocks[1]['info'] = t('Find a Wish List');
    return $blocks;
  }
  else if ($op == 'view' && $delta == 0) {
    if (variable_get('uc_wishlist_expanded', FALSE)) {
      drupal_add_js('var expanded_block = true;', 'inline');
    }
    else {
      drupal_add_js('var expanded_block = false;', 'inline');
    }

    drupal_add_js(drupal_get_path('module', 'uc_wishlist') .'/uc_wishlist_block.js');
    drupal_add_css(drupal_get_path('module', 'uc_wishlist') .'/uc_wishlist_block.css');

    $items = uc_wishlist_get_contents();
    if (empty($items) && variable_get('uc_wishlist_empty_hide', '0')) {
      return;
    }
    $item_count = count($items);

    $uc_wishlist_path = base_path() . drupal_get_path('module', 'uc_wishlist');
    $wishlist_image = $uc_wishlist_path;
    $wishlist_image .= ($item_count) ? '/images/cart_full.gif' : '/images/cart_empty.gif';
    $arrow_down_image = $uc_wishlist_path .'/images/bullet-arrow-down.gif';
    $arrow_up_image = $uc_wishlist_path .'/images/bullet-arrow-up.gif';

    $block['subject'] = theme('uc_wishlist_block_title', $wishlist_image, $uc_wishlist_path, $arrow_up_image);
    $block['content'] = theme('uc_wishlist_block_content');

    return $block;
  }
  else if ($op == 'view' && $delta == 1) {
    $block['subject'] = t('Find a Wish List');
    $block['content'] = drupal_get_form('uc_wishlist_search_form');
    return $block;
  }
  else if ($op == 'configure' && $delta == 0) {
    $form['uc_wishlist_empty_hide'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide block if wish list is empty.'),
      '#default_value' => variable_get('uc_wishlist_empty_hide', FALSE),
    );
    $form['uc_wishlist_expanded'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display the wish list expanded by default.'),
      '#default_value' => variable_get('uc_wishlist_expanded', FALSE),
    );
    $form['uc_wishlist_show_help_text'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display small help text in the wish list block.'),
      '#default_value' => variable_get('uc_wishlist_show_help_text', FALSE),
    );
    $form['uc_wishlist_help_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Wish list help text'),
      '#description' => t('Displayed if the above box is checked.'),
      '#size' => 32,
      '#default_value' => variable_get('uc_wishlist_help_text', t('Click title to display wish list contents.')),
    );
    return $form;
  }
  elseif ($op == 'save' && isset($edit['uc_wishlist_empty_hide']) && $delta == 0) {
    variable_set('uc_wishlist_empty_hide', $edit['uc_wishlist_empty_hide']);
    variable_set('uc_wishlist_expanded', $edit['uc_wishlist_expanded']);
    variable_set('uc_wishlist_show_help_text', $edit['uc_wishlist_show_help_text']);
    variable_set('uc_wishlist_help_text', check_plain($edit['uc_wishlist_help_text']));
  }
}

/**
 * Theme the wish list block title
 */
function theme_uc_wishlist_block_title($wishlist_image, $uc_wishlist_path, $arrow_up_image) {
  $output = l('<img src="'. $wishlist_image .'" id="block-wishlist-title-image" alt="" />', 'wishlist', NULL, NULL, NULL, FALSE, TRUE)
             .'<span class="block-wishlist-title-bar" id="block-wishlist-title-bar-text" onclick="wishlist_toggle(\''. $uc_wishlist_path .'\');">'
             .'<span id="block-wishlist-title">'. t('Wish List') .'</span></span>'
             .'<span class="block-wishlist-title-bar" id="block-wishlist-title-bar-arrow" onclick="wishlist_toggle(\''. $uc_wishlist_path .'\');">'
             .'<img id="block-wishlist-title-arrow" src="'. $arrow_up_image .'" alt="[]" title="'. t('Expand wish list block.') .'" /></span>';
  return $output;
}

/**
 * Theme the wish list block content.
 */
function theme_uc_wishlist_block_content() {
  /* [note from uc_cart.module]
     The e-commerce cart has a bit here that takes into account page caching
     for anonymous users.  This would really only affect anonymous users browsing
     with items in their cart, not just people browsing the site.  If there is
     a performance issue, this should be a place to look to tweak...  -RS  */
  if (!module_exists('uc_store')) {
    return '<div id="block-wishlist-contents"><p>The module uc_store must be enabled for the wish list block to function properly.</p></div>';
  }

  if (variable_get('uc_wishlist_show_help_text', FALSE)) {
    $output = '<span class="wishlist-help-text">'
            . variable_get('uc_wishlist_help_text', t('Click title to display wish list contents.'))
            .'</span>';
  }

  $output .= '<div id="block-wishlist-contents">';

  $items = uc_wishlist_get_contents();

  $item_count = 0;
  if (!empty($items)) {
    $output .= '<table class="wishlist-block-table">'
              .'<tbody class="wishlist-block-tbody">';
    foreach ($items as $item) {
      $output .= '<tr class="wishlist-block-item"><td class="wishlist-block-item-qty">'. $item->qty .'x</td>'
               .'<td class="wishlist-block-item-title">'. l($item->title, 'node/'. $item->nid) .'</td>'
               .'<td class="wishlist-block-item-price">'. uc_currency_format($item->price) .'</td></tr>';
      if (is_array($item->data['attributes']) && !empty($item->data['attributes'])) {
        $display_item = module_invoke($item->module, 'wishlist_display', $item, 0);
        $output .= '<tr><td colspan="3">'. $display_item['options']['#value'] .'</td></tr>';
      }
      $total += ($item->price) * $item->qty;
      $item_count += $item->qty;
    }

    $output .= '</tbody></table>';
  }
  else {
    $output .= '<p>'. t('There are no products on your wish list.') .'</p>';
  }

  $output .= '</div>';

  $item_word = ($item_count == 1) ? t('Item') : t('Items');
  $view = '('. l(t('View wish list'), 'wishlist', array('rel' => 'nofollow')) .')';
  $output .= '<table class="wishlist-block-summary-table"><tbody class="wishlist-block-summary-tbody">'
            .'<tr class="wishlist-block-summary-tr"><td class="wishlist-block-summary-items">'. $item_count
            .' '. $item_word .'</td><td class="wishlist-block-summary-total">'
            .'<strong>'. t('Total:') .'</strong> '. uc_currency_format($total) .'</td></tr>';
  if ($item_count > 0) {
    $output .= '<tr><td colspan="2" class="wishlist-block-summary-checkout">'. $view .'</td></tr>';
  }
  $output .= '</tbody></table>';
  
  return $output;
}

/**
 * Implementation of hook_exit().
 *
 * Code from CacheExclude - http://drupal.org/project/cacheexclude
 */
function uc_wishlist_exit() {
  global $base_root;

  $pages = array('wishlist', 'wishlist/search');
  $this_page = request_uri();
  foreach ($pages as $page) {
    if ($page && strstr($this_page, $page) !== FALSE) {
      cache_clear_all($base_root . $this_page, 'cache_page');
      return;
    }
  }
}

/**
 * Implementation of hook_user().
 *
 * When a user logs in, any products on the wish list associated with the 
 * current session are moved to the newly authenticated user's wish list 
 * (or if that does not exist, the anonymous wish list is assigned as the 
 * user's wish list).
 * 
 * Also, provide a link to the user's wish list from the user's profile page.
 */
function uc_wishlist_user($op, &$edit, &$user, $category = NULL) {
  switch ($op) {
    case 'login':
      $oldwid = db_result(db_query("SELECT wid FROM {uc_wishlists} WHERE uid = '%s'", session_id()));
      $newwid = uc_wishlist_get_current_id();
      if ($oldwid && $newwid) {
        $res = db_query("SELECT * FROM {uc_wishlist_products} WHERE wid = %d", $oldwid);
        while ($obj = db_fetch_object($res)) {
          // NOTE: the delete must precede uc_wishlist_add_item because 
          // it may update the old record but we expect it to insert
          // a new record
          db_query("DELETE FROM {uc_wishlist_products} WHERE wpid = %d", $obj->wpid);
          uc_wishlist_add_item($obj->nid, $obj->qty, unserialize($obj->data), $newwid);
        }
        db_query("DELETE FROM {uc_wishlists} WHERE wid = %d", $oldwid);
      }
      elseif ($oldwid && !$newwid) {
        db_query("UPDATE {uc_wishlists} SET uid = %d WHERE wid = %d", $user->uid, $oldwid);
      }
      break;
    case 'view':
      $res = db_query("SELECT * FROM {uc_wishlists} WHERE uid = %d", $user->uid);
      $items = array();
      while ($obj = db_fetch_object($res)) {
        $items['wishlist_'. $obj->wid] = array(
          'value' => l($obj->title, "wishlist/{$obj->wid}"),
        );
      }
      if (count($items)>0) {
        return array(t('Wish lists') => $items);
      }
      break;
    case 'delete':
      $wid = db_result(db_query("SELECT wid FROM {uc_wishlists} WHERE uid = %d", $user->uid));
      if ($wid) {
        db_query("DELETE FROM {uc_wishlist_products} WHERE wid = %d", $wid);
        db_query("DELETE FROM {uc_wishlists} WHERE wid = %d", $wid);
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Alter uc_product_add_to_cart_form instances to include 'add to wish list'
 * button. Form submission is routed through uc_wishlist_add_to_wishlist
 * to differentiate between 'add to cart' and 'add to wish list'. If this
 * module is added to Ubercart core, then this can be simplified.
 *
 * Alter uc_cart_checkout_form to include by default the delivery address 
 * of a wish list's owner, if items come from a single wish list.
 */
function uc_wishlist_form_alter($form_id, &$form) {
  if (strlen($form_id) > 28 && substr($form_id, 0, 27) == 'uc_product_add_to_cart_form') {
    $form['wishlist'] = array(
      '#type' => 'submit',
      '#value' => t('Add to wish list'),
    );
    $oldsubmit = array($form['#submit']);
    $form['#submit'] = array('uc_wishlist_add_to_wishlist' => $oldsubmit);
  }
  else if ($form_id == 'uc_cart_checkout_form' && !isset($_SESSION['cart_order'])) {
    $items = unserialize($form['cart_contents']['#value']);
    $wids = array();
    foreach ($items as $item) {
      if ($item->data['wid']) {
        $wids[] = $item->data['wid'];
      }
    }
    $wids = array_unique($wids);
    if (count($wids)>1) {
      drupal_set_message(t('This order contains items from multiple wish lists. It is not possible to automatically address this order for its recipient.'));
    }
    else if (count($wids) == 1) {
      $wishlist = uc_wishlist_get_wishlist($wids[0]);
      if (!empty($wishlist->address->firstname) && !empty($wishlist->address->lastname) && !empty($wishlist->address->addr1) && !empty($wishlist->address->postcode)) {
        $form['panes']['delivery']['delivery_first_name']['#default_value'] = $wishlist->address->firstname;
        $form['panes']['delivery']['delivery_last_name']['#default_value'] = $wishlist->address->lastname;
        $form['panes']['delivery']['delivery_company']['#default_value'] = $wishlist->address->company;
        $form['panes']['delivery']['delivery_street1']['#default_value'] = $wishlist->address->addr1;
        $form['panes']['delivery']['delivery_street2']['#default_value'] = $wishlist->address->addr2;
        $form['panes']['delivery']['delivery_city']['#default_value'] = $wishlist->address->city;
        $form['panes']['delivery']['delivery_country']['#default_value'] = $wishlist->address->country;
        $form['panes']['delivery']['delivery_zone']['#default_value'] = $wishlist->address->zone;
        $form['panes']['delivery']['delivery_postal_code']['#default_value'] = $wishlist->address->postcode;
        $form['panes']['delivery']['delivery_phone']['#default_value'] = $wishlist->address->phone;
        drupal_set_message(t('This order contains items from a wish list. The delivery address has been automatically set to the preferred address from the wish list. You may change this address.'));
      }
    }
  }
}

/**
 * uc_wishlist_add_to_wishlist
 *
 * See comment for uc_wishlist_form_alter: This function handles submission
 * of uc_product_add_to_cart_form and differentiates between 'add to cart' 
 * and 'add to wish list' functions.
 */
function uc_wishlist_add_to_wishlist($form_id, $form_values, $submit) {
  if ($form_values['op'] == $form_values['wishlist']) {
    // add item to wish list
    uc_wishlist_add_item($form_values['nid'], $form_values['qty'], module_invoke_all('add_to_cart_data', $form_values));
  }
  else {
    // execute form with original submission steps
    $form['#submit'] = $submit;
    drupal_submit_form($form_id, $form);
  }
}

/*******************************************************************************
 * Hook Functions (TAPIr)
 ******************************************************************************/

/**
 * Implementation of hook_table_settings().
 */
function uc_wishlist_table_settings() {
  $tables[] = array(
    'id' => 'uc_wishlist_view_table',
    'description' => t("Display information on products in a customer's wish list."),
    'path' => 'admin/store/settings/tables',
    'access' => 'administer store',
    'preview' => FALSE,
  );
  
  return $tables;
}

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implements Ubercart hook_cart_item
 * 
 * When an item is loaded in the shopping cart, this adds a note to the 
 * title to show from which wish list this item came. This will not display 
 * in the cart (since those titles come from hook_cart_display), but will 
 * show on the checkout screen and be recorded in the order.
 */
function uc_wishlist_cart_item($op, &$item) {
  switch ($op) {
    case 'load':
      if ($item->data && $item->data['wid'] && $item->data['wpid']) {
        $wishlist = uc_wishlist_get_wishlist($item->data['wid']);
        if ($wishlist && !empty($wishlist->title)) {
          $item->title .= t(' [from @wishlist]', array('@wishlist' => $wishlist->title));
        }
      }
      break;
    case 'can_ship':
//TODO another test whether item is still needed
      return TRUE;
  }
}

/**
 * Implements Ubercart hook_order.
 *
 * When the status of an order is changed to pending, then the order is
 * scanned for items from wish lists (that contain wid and wpid data fields).
 * If items are found, then their records in uc_wishlist_products are 
 * updated with the additional purchases.
 */
function uc_wishlist_order($op, &$arg1, $arg2) {
  if ($op == 'update') {
    if (uc_order_status_data($arg1->order_status, 'state') != 'in_checkout' || uc_order_status_data($arg2, 'state') == 'in_checkout' || uc_order_status_data($arg2, 'state') == 'canceled') {
      return;
    }
    $o = $arg1;
    foreach ($o->products as $key => $item) {
      if ($item->data['wid'] && $item->data['wpid'] && !isset($item->data['wset'])) {
        $wid = $item->data['wid'];
        $wpid = $item->data['wpid'];
        $w = uc_wishlist_get_wishlist($wid);
        $witem = uc_wishlist_get_product($wpid);
        $purchase = array(
          'order_id' => $item->order_id,
          'order_product_id' => $item->order_product_id,
          'uid' => $o->uid,
          'date' => time(),
        );
        for ($i=0; $i<$item->qty; $i++) {
          $witem->purchase[] = $purchase;
        }
        uc_wishlist_update_purchase($witem);
      }
    }
  }
}

/**
 * Implementation of hook_wishlist_pane().
 */
function uc_wishlist_wishlist_pane($items, $wid, $own) {
  $panes[] = array(
    'id' => 'wishlist_form',
    'title' => t('Default wish list form'),
    'enabled' => TRUE,
    'weight' => 0,
    'body' => !is_null($items) ? '<div id="wishlist-form-pane">'. drupal_get_form('uc_wishlist_view_form', $items, $wid, $own) .'</div>' : '',
  );

  return $panes;
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * uc_wishlist_wishlist_panes_form
 */
function uc_wishlist_wishlist_panes_form() {
  $panes = uc_wishlist_wishlist_pane_list(NULL);

  $form['panes'] = array(
    '#theme' => 'uc_pane_sort_table',
    '#pane_prefix' => 'uc_wip',
  );
  foreach ($panes as $pane) {
    $form['panes'][$pane['id']]['uc_wip_'. $pane['id'] .'_enabled'] = array(
      '#type' => 'checkbox',
      '#default_value' => $pane['enabled'],
    );
    $form['panes'][$pane['id']]['title'] = array(
      '#value' => $pane['title'],
    );
    $form['panes'][$pane['id']]['uc_wip_'. $pane['id'] .'_weight'] = array(
      '#type' => 'weight',
      '#delta' => 10,
      '#default_value' => $pane['weight'],
    );
  }

  return system_settings_form($form);
}

/**
 * The wish list view page lets you view/modify the wish list contents.
 */
function uc_wishlist_view() {
  global $user;

  if (arg(1)>0) {
    $wid = arg(1);
  }
  else {
    $wid = uc_wishlist_get_current_id();
  }

  $wishlist = uc_wishlist_get_wishlist($wid);
  if (!$wishlist) {
    drupal_set_title(t('Wish list'));
    drupal_set_message(t("You have not added any products to your wish list. You can add any product from the store to your wish list by clicking the 'Add to wish list' button on the product's page."));
    return t('There are no products on this wish list.');
  }

  // $own defines whether the wish list is owned by the current user:
  // this affects how many parts of the page are rendered.
  $own = FALSE;
  if ($wishlist && ($user->uid == $wishlist->uid || session_id() == $wishlist->uid)) {
    $own = TRUE;
  }

  drupal_set_title($wishlist->title);
  
  if ($own||user_access('administer wishlists')) {
    if (!$user->uid) {
      drupal_set_message(t('You must !login or !register to save your wish list.', array('!login' => l(t('login'), 'user/login'), '!register' => l(t('register an account'), 'user/register'))));
    }
    $collapsed = TRUE;
    if (empty($wishlist->address->firstname) || empty($wishlist->address->lastname) || empty($wishlist->address->addr1) || empty($wishlist->address->city) || empty($wishlist->address->postcode)) {
      drupal_set_message(t('Your name and/or address is not specified for this wish list. Without these, other users will not be able to automatically send items on your wish list to you.'));
      $collapsed = FALSE;
    }
    $output .= drupal_get_form('uc_wishlist_settings_form', $wishlist, $collapsed);
  }

  if ($wishlist->date<time()) {
    $output .= '<p>'. t('This wish list may be no longer valid. It was for an event on @date.', array('@date' => date('F j, Y', $wishlist->date))) .'</p>';
  }
  else if ($wishlist->date>0) {
    $output .= '<p>'. t('This wish list is valid until @date.', array('@date' => date('F j, Y', $wishlist->date))) .'</p>';
  }
  
  $items = uc_wishlist_get_contents($wid);
  if (empty($items)) {
    return '<p>'. t('There are no products on this wish list.') .'</p>';
  }

  $panes = uc_wishlist_wishlist_pane_list($items, $wid, $own);
  foreach ($panes as $pane) {
    if ($pane['enabled']) {
      $output .= $pane['body'];
    }
  }

  if (isset($_SESSION['last_url'])) {
    drupal_set_breadcrumb(array(l(t('Back'), check_plain($_SESSION['last_url']))));
    unset($_SESSION['last_url']);
  }
  else {
    $link = l(variable_get('uc_wishlist_breadcrumb_text', t('Home')), variable_get('uc_wishlist_breadcrumb_url', '<front>'));
    drupal_set_breadcrumb(array($link));
  }
  return $output;
}

/**
 * Display a page allowing the customer to view his/her wish list.
 */
function uc_wishlist_view_form($items = NULL, $wid, $own) {
  $form['items'] = array('#tree' => TRUE);

  $i = 0;
  foreach ($items as $item) {
    $item->module = 'uc_product';
    $display_item = module_invoke($item->module, 'wishlist_display', $item, $own);
    if (!empty($display_item)) {
      $form['items'][$i] = $display_item;
      $i++;
    }
  }

  if (($page = variable_get('uc_continue_shopping_url', '')) != '<none>' &&
      variable_get('uc_continue_shopping_type', 'link') == 'button') { 
    $form['continue_shopping'] = array(
      '#type' => 'submit',
      '#value' => variable_get('uc_continue_shopping_text', t('Continue shopping')),
    );
  }

  $form['wid'] = array(
    '#type' => 'hidden',
    '#value' => $wid,
  );
  if ($own||user_access('administer wishlists')) {
    $form['own'] = array(
      '#type' => 'hidden',
      '#value' => TRUE,
    );
    $form['update'] = array(
      '#type' => 'submit',
      '#value' => t('Save wish list'),
    );
  }
  return $form;
}

function theme_uc_wishlist_view_form($form) {
  drupal_add_css(drupal_get_path('module', 'uc_wishlist') .'/uc_wishlist.css');

  $output = '<div id="wishlist-form-products">'
          . tapir_get_table('uc_wishlist_view_table', $form) .'</div>';

  if (($page = variable_get('uc_continue_shopping_url', '')) != '<none>') {
    if (variable_get('uc_continue_shopping_type', 'link') == 'link') {
      $continue_shopping_link = l(variable_get('uc_continue_shopping_text', t('Continue shopping')), $page);
    }
    else {
      $continue_shopping_link = drupal_render($form['continue_shopping']);
    }
  }

  $output .= '<div id="wishlist-form-buttons"><div id="wishlist-button-shopping">'
           . $continue_shopping_link .'</div>'
           . drupal_render($form['order_id']) . drupal_render($form['form_id'])
           . drupal_render($form['form_token']) . drupal_render($form['update'])
           . drupal_render($form['addcart']) .'</div>';
  return $output;
}

function uc_wishlist_view_table($op, &$form) {
  $own = isset($form['own']) ? TRUE : FALSE;

  switch ($op) {
    case 'fields':
      if ($own) {
        $fields[] = array('name' => 'remove', 'title' => t('Remove'),
                        'weight' => 0, 'enabled' => TRUE, 'locked' => TRUE);
      }
      $fields[] = array('name' => 'image', 'title' => t('Products'),
                        'weight' => 1, 'enabled' => TRUE);
      $fields[] = array('name' => 'desc', 'title' => '', 'weight' => 2,
                        'enabled' => TRUE);
      $fields[] = array('name' => 'wantqty', 'title' => t('Qty. Wanted'), 'weight' => 3,
                        'enabled' => TRUE);
      $fields[] = array('name' => 'haveqty', 'title' => t('Qty. Have'), 'weight' => 4,
                        'enabled' => TRUE);
      $fields[] = array('name' => 'qty', 'title' => t('Qty. to Buy'), 'weight' => 5,
                        'enabled' => TRUE);
      $fields[] = array('name' => 'addcart', 'title' => '', 'weight' => 6,
                        'enabled' => TRUE);
      $fields[] = array('name' => 'total', 'title' => t('Total'), 'weight' => 7,
                        'enabled' => TRUE);
      return $fields;

    case 'data':
      foreach (element_children($form['items']) as $i) {
        $nid = $form['items'][$i]['nid']['#value'];
        $subtotal += $form['items'][$i]['#total'];
        $desc = drupal_render($form['items'][$i]['title']) .'<br />';
        $desc .= drupal_render($form['items'][$i]['options']);

        if ($own) {
          $data['remove'][] = array('data' => drupal_render($form['items'][$i]['remove']), 'align' => 'center');
        }
        $data['image'][] = array('data' => uc_product_get_picture($nid, 'cart'));
        $data['desc'][] = array('data' => $desc, 'width' => '100%');
        $data['wantqty'][] = array('data' => $form['items'][$i]['wantqty'] ? drupal_render($form['items'][$i]['wantqty']) : '');
        $data['haveqty'][] = array('data' => $form['items'][$i]['haveqty'] ? drupal_render($form['items'][$i]['haveqty']) : '');
        $data['qty'][] = array('data' => $form['items'][$i]['qty'] ? drupal_render($form['items'][$i]['qty']) : '');
        $data['addcart'][] = array('data' => $form['items'][$i]['addcart'] ? drupal_render($form['items'][$i]['addcart']) : '');
        $data['total'][] = array('data' => uc_currency_format($form['items'][$i]['#total']), 'nowrap' => 'nowrap');
        $data['#attributes'][] = array('valign' => 'top');
      }
      return $data;

    case 'attributes':
      $attributes = array('width' => '100%');
      return $attributes;
  }

}

function uc_wishlist_view_form_validate($form_id, $form_values) {
  // find wish list item associated with 'add to cart' submitted
  foreach ($form_values as $key => $val) {
    if (strpos($key, 'addcart-') === 0) {
      $wpid = intval(substr($key, 8));
    }
  }
  // if adding item to cart, check quantities
  if ($wpid) {
    foreach ($form_values['items'] as $key => $item) {
      if ($item['wpid'] == $wpid && $item['qty'] == 0) {
        $item['qty'] = 1;
      }
      if ($item['qty'] && ($item['qty']+$item['haveqty'])>$item['wantqty']) {
        form_set_error($key, t('You have selected to purchase more items than requested.'));
      }
    }
  }
}

function uc_wishlist_view_form_submit($form_id, $form_values) {
  if (isset($form_values['op']) && !empty($form_values['op'])) {
    if ($form_values['op'] == variable_get('uc_continue_shopping_text', t('Continue shopping'))) {
      return variable_get('uc_continue_shopping_url', '');
    }
    else if ($form_values['op'] == $form_values['update']) {
      cache_clear_all();
      uc_wishlist_update_item_object((object)$form_values);
      drupal_set_message(t('Your wish list has been updated.'));
      return "wishlist/{$form_values['wid']}";
    }
  }
  else {
    // find wish list item associated with 'add to cart' submitted
    foreach ($form_values as $key => $val) {
      if (strpos($key, 'addcart-') === 0) {
        $wpid = intval(substr($key, 8));
      }
    }
    if ($wpid) {
      foreach ($form_values['items'] as $key => $item) {
        if ($item['wpid'] == $wpid && $item['qty'] == 0) {
          $form_values['items'][$key]['qty'] = 1;
        }
      }
      cache_clear_all();
      uc_wishlist_add_items_to_cart((object)$form_values);
      drupal_set_message(t('The item(s) have been added to your shopping cart.'));
      return 'cart';
    }
  }
}

/**
 * uc_wishlist administrator manage and settings pages
 */
function uc_wishlist_admin_manage() {
  $arg3 = arg(3);
  if (is_numeric($arg3)) {
    $defwid = $arg3;
    if (arg(4) == 'delete') {
      if (arg(5) == 'confirm') {
        db_query('DELETE FROM {uc_wishlists} WHERE wid = %d', $defwid);
        db_query('DELETE FROM {uc_wishlist_products} WHERE wid = %d', $defwid);
        drupal_set_message(t('Wish list deleted.'));
        drupal_goto('admin/store/wishlist');
      }
      else {
        drupal_set_message(t('Are you sure you want to delete this wish list? Please click !here to confirm.', array('!here' => l(t('here'), 'admin/store/wishlist/'. $defwid .'/delete/confirm'))));
      }
    }
  }

  $header = array(
    array('data' => t('User'), 'field' => 'uid'),
    array('data' => t('Title'), 'field' => 'title'),
    array('data' => t('Expiration date'), 'field' => 'date'),
    array('data' => t('Status'))
  );

  if ($defwid) {
    $res = db_query('SELECT * FROM {uc_wishlists} WHERE wid = %d', $defwid);
  }
  else {
    $q = tablesort_sql($header);
    $res = db_query('SELECT * FROM {uc_wishlists}'. $q);
  }
  
  while ($wishlist = db_fetch_object($res)) {
    if ($wishlist->date < time()) {
      $status = t('Expired');
    }
    else {
      $status = t('Ok');
    }
    $op = $status .' | '. l(t('Delete'), 'admin/store/wishlist/'. $wishlist->wid .'/delete');
    $rows[] = array(
      theme_username(user_load(array('uid' => $wishlist->uid))),
      l($wishlist->title, 'wishlist/'. $wishlist->wid),
      format_date($wishlist->date),
      $op
    );
  }
  
  return theme('table', $header, $rows);
}

function uc_wishlist_admin_settings() {
  $form = array();
  $form['deftitle'] = array(
    '#type' => 'textfield',
    '#title' => t('Default wish list title'),
    '#default_value' => variable_get('uc_wishlist_default_title', "%user's wish list"),
    '#description' => t("The default name of a new wish list. The token %user will be replaced by the user's name."),
    '#size' => 30,
  );
  $form['allowanony'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow anonymous users to create wish lists'),
    '#default_value' => variable_get('uc_wishlist_allow_anonymous', 0),
    '#description' => t('Check this box to allow anonymous users to create wish lists. If not checked, anonymous visitors will be prompted to login or register before creating a wish list.'),
  );
//TODO: add uc_wishlist_default_length
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  return $form;
}

function uc_wishlist_admin_settings_submit($form_id, $form_values) {
  variable_set('uc_wishlist_default_title', $form_values['deftitle']);
  variable_set('uc_wishlist_allow_anonymous', $form_values['allowanony']);
}

/**
 * Implementation of hook_wishlist_display().
 * Adapted from hook_cart_display in uc_product.
 */
function uc_product_wishlist_display($item, $own) {
  $node = node_load($item->nid);
  $element = array();
  $element['nid'] = array('#type' => 'value', '#value' => $node->nid);
  $element['wpid'] = array('#type' => 'value', '#value' => $item->wpid);
  $element['module'] = array('#type' => 'value', '#value' => 'uc_product');
  $element['remove'] = array('#type' => 'checkbox');
  $op_names = '';

  $item->haveqty = 0;
  if (is_array($item->purchase)) {
    $item->haveqty = count($item->purchase);
  }

  if (module_exists('uc_attribute')) {
    $op_names = "<ul class=\"wishlist-options\">\n";
    foreach ($item->options as $option) {
      $op_names .= '<li>'. $option['attribute'] .': '. $option['name'] ."</li>\n";
    }
    $op_names .= "</ul>\n";
  }
  $element['options'] = array('#value' => $op_names);
  $element['title'] = array(
    '#value' => l($node->title, 'node/'. $node->nid),
  );
  $element['#total'] = $item->price * $item->qty;
  $element['data'] = array('#type' => 'hidden', '#value' => serialize($item->data));
  $element['wantqty'] = array(
    '#type' => 'textfield',
    '#default_value' => $item->qty,
    '#size' => 5,
    '#maxlength' => 6,
    '#disabled' => $own ? FALSE : TRUE
  );
  $element['haveqty'] = array(
    '#type' => 'textfield',
    '#default_value' => $item->haveqty,
    '#size' => 5,
    '#maxlength' => 6,
    '#disabled' => user_access('administer wishlists')? FALSE : TRUE
  );
  $element['qty'] = array(
    '#type' => 'textfield',
    '#default_value' => 0,
    '#size' => 5,
    '#maxlength' => 6,
    '#disabled' => ($item->haveqty<$item->qty) ? FALSE : TRUE
  );
// suggestion to use #name to distinguish multiple submit buttons:
// http://www.theamoebaproject.com/blog/bneisler/drupal-5-forms-multiple-submit-buttons-same-value-text
  $element['addcart'] = array(
    '#type' => 'submit',
    '#name' => 'addcart-'. $item->wpid,
    '#value' => t('Add to cart'),
  );
  return $element;
}

/**
 * Update information about a specific item in current wish list.
 */
function uc_product_update_wishlist_item($nid, $data = array(), $qty, $qty_purchase, $wid = NULL, $wpid = NULL) {
  if (!$nid) {
    return NULL;
  }
  $wid = $wid ? $wid : uc_wishlist_get_current_id();
  if ($qty < 1) {
    $wpid = $wpid ? $wpid : $data['wpid'];
    uc_wishlist_remove_item($wpid);
  }
  else {  	
    db_query("UPDATE {uc_wishlist_products} SET qty = %d, qty_purchase = %d, changed = %d WHERE wpid = %d", $qty, $qty_purchase, time(), $wpid);
    cache_clear_all();
  }

  // Rebuild the items hash
  uc_wishlist_get_contents();
  if (!substr(request_uri(), 'wishlist', -4)) {
    drupal_set_message(t('Your item(s) have been updated.'));
  }
}

/**
 * Wishlist settings form.
 */
function uc_wishlist_settings_form($wishlist, $collapsed = FALSE) {
  require_once(drupal_get_path('module', 'uc_wishlist') .'/uc_wishlist_address_pane.inc');
  drupal_add_js(drupal_get_path('module', 'uc_wishlist') .'/uc_wishlist.js');

  $date = getdate($wishlist->date);
  $date['day'] = $date['mday'];
  $date['month'] = $date['mon'];

  $form = array();
  $form['ws'] = array(
    '#type' => 'fieldset',
    '#title' => 'Settings',
    '#collapsible' => TRUE,
    '#collapsed' => $collapsed,
  );
  $form['ws']['wid'] = array(
    '#type' => 'hidden',
    '#value' => $wishlist->wid,
  );
  $form['ws']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $wishlist->title,
    '#length' => 30,
    '#required' => TRUE,
  );
  $form['ws']['date'] = array(
    '#type' => 'date',
    '#title' => t('Event or expiration date'),
    '#default_value' => $date,
    '#description' => t('If this wish list is associated with an event or will no longer be relevant on a specific date, enter it here.'),
  );
  $form['ws']['address'] = array(
    '#type' => 'fieldset',
    '#title' => t('Mailing address'),
    '#description' => t('If you supply an address here it will be made available as a shipping address to anyone who purchases an item from your wish list.'),
  );
  $arg1 = new stdClass();
  $arg1->delivery_first_name = $wishlist->address->firstname;
  $arg1->delivery_last_name = $wishlist->address->lastname;
  $arg1->delivery_company = $wishlist->address->company;
  $arg1->delivery_street1 = $wishlist->address->addr1;
  $arg1->delivery_street2 = $wishlist->address->addr2;
  $arg1->delivery_city = $wishlist->address->city;
  $arg1->delivery_country = $wishlist->address->country;
  $arg1->delivery_zone = $wishlist->address->zone;
  $arg1->delivery_postal_code = $wishlist->address->postcode;
  $arg1->delivery_phone = $wishlist->address->phone;
  $arg2 = FALSE;
  $rv = uc_wishlist_address_pane('view', $arg1, $arg2);
  $form['ws']['address']['address'] = $rv['contents'];
  $form['ws']['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );
  return $form;
}

function uc_wishlist_settings_form_validate($form_id, &$form_values) {
  global $user;
  $wid = $form_values['wid'];
  $wishlist = uc_wishlist_get_wishlist($wid);
  if (!$wishlist) {
    drupal_set_message(t('Could not find the specified wish list.'), 'error');
    return FALSE;
  }
  if ($wishlist->uid != $user->uid && !user_perm('administer store')) {
    drupal_set_message(t('You do not have permission to edit this wish list.'), 'error');
    return FALSE;
  }
}

function uc_wishlist_settings_form_submit($form_id, $form_values) {
  $wid = $form_values['wid'];
  $title = $form_values['title'];
  $dary = $form_values['date'];
  $date = mktime(0, 0, 0, $dary['month'], $dary['day'], $dary['year']);
  $address = new stdClass();
  $address->firstname = $form_values['delivery_first_name'];
  $address->lastname = $form_values['delivery_last_name'];
  $address->company = $form_values['delivery_company'];
  $address->addr1 = $form_values['delivery_street1'];
  $address->addr2 = $form_values['delivery_street2'];
  $address->city = $form_values['delivery_city'];
  $address->country = $form_values['delivery_country'];
  $address->zone = $form_values['delivery_zone'];
  $address->postcode = $form_values['delivery_postal_code'];
  $address->phone = $form_values['delivery_phone'];
  uc_wishlist_update_wishlist($wid, $title, $date, $address);
  drupal_set_message(t('Your wish list has been updated.'));
  return "wishlist/{$wid}";
}


/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

/**
 * Return the wishlist id of the current user.
 */
function uc_wishlist_get_current_id() {
  global $user;
  if ($user->uid) {
    $uid = $user->uid;
  }
  else {
    $uid = mysql_real_escape_string(session_id());
  }
  $res = db_query('SELECT wid FROM {uc_wishlists} WHERE uid = "%s"', (string)$uid);
// TODO: handle multiple wishlists?
  $wid = db_result($res);
  if ($wid) {
    return $wid;
  }
  return FALSE;
}

/**
 * Get the wish list object from the database.
 */
function uc_wishlist_get_wishlist($wid = NULL) {
  $wid = $wid ? $wid : uc_wishlist_get_current_id();
  if (!$wid || !is_numeric($wid)) {
    return FALSE;
  }
  $res = db_query('SELECT * FROM {uc_wishlists} WHERE wid = %d', $wid);
  $obj = db_fetch_object($res);
  if ($obj && $obj->wid == $wid) {
    $obj->address = unserialize($obj->address);
    return $obj;
  }
  return FALSE;
}

/**
 * Get the items in a specified wish list.
 */
function uc_wishlist_get_contents($wid = NULL) {
  $wid = $wid ? $wid : uc_wishlist_get_current_id();
  if (!$wid || !is_numeric($wid)) {
    return FALSE;
  }
  $items = array();
  
  
  // $res = db_query('SELECT w.*, n.title, n.vid FROM {node} n INNER JOIN {uc_wishlist_products} w ON n.nid = w.nid WHERE w.wid = %d', $wid);
  // GHC
  $res = db_query('SELECT 
      w.*,
      n.title,
      n.vid,
      term_data.name
    FROM
      {node} n
      INNER JOIN {uc_wishlist_products} w ON (n.nid = w.nid)
      INNER JOIN {term_node} ON (w.nid = term_node.nid)
      INNER JOIN {term_data} ON (term_node.tid = term_data.tid)
    WHERE
      w.wid = %d
    GROUP BY
      w.wpid
    ORDER BY
      term_data.name', $wid);
  
  
  while ($item = db_fetch_object($res)) {
    for ($i = 0; $i<count($items); $i++) {
      if ($items[$i]->nid == $item->nid && $items[$i]->data == $item->data) {
        $items[$i]->qty += $item->qty;
        continue 2;
      }
    }
    $product = node_load($item->nid);
    $item->model = $product->model;
    $item->cost = $product->cost;
    $item->price = $product->sell_price;
    $item->weight = $product->weight;
    $item->weight_units = $product->weight_units;
    $item->shippable = $product->shippable;
    $item->data = unserialize($item->data);
    $item->module = $item->data['module'];
    $item->purchase = unserialize($item->purchase);
    $item->options = array();

    // add wishlist id data
    $item->data['wid'] = $item->wid;
    $item->data['wpid'] = $item->wpid;

    // Invoke hook_cart_item() with $op = 'modify' in enabled modules.
    // An especially important hook is uc_attribute_cart_item which
    // updates the item given the attributes.
    foreach (module_implements('cart_item') as $module) {
      if ($module == 'uc_wishlist') {
        continue;
      }
      $func = $module .'_cart_item';
      $func('load', $item);
    }
    $items[] = $item;
  }

  return $items;
}

function uc_wishlist_get_product($wpid) {
  if (!$wpid) {
    return FALSE;
  }
  $item = FALSE;
  $res = db_query("SELECT w.*, n.title, n.vid FROM {node} n INNER JOIN {uc_wishlist_products} w ON n.nid = w.nid WHERE w.wpid = %d", $wpid);
  if ($item = db_fetch_object($res)) {
    $product = node_load($item->nid);
    $item->model = $product->model;
    $item->cost = $product->cost;
    $item->price = $product->sell_price;
    $item->weight = $product->weight;
    $item->weight_units = $product->weight_units;
    $item->shippable = $product->shippable;
    $item->data = unserialize($item->data);
    $item->module = $item->data['module'];
    $item->purchase = unserialize($item->purchase);
    $item->options = array();

    // add wishlist id data
    $item->data['wid'] = $item->wid;
    $item->data['wpid'] = $item->wpid;

    // Invoke hook_cart_item() with $op = 'modify' in enabled modules.
    // An especially important hook is uc_attribute_cart_item which
    // updates the item given the attributes.
    foreach (module_implements('cart_item') as $module) {
      if ($module == 'uc_wishlist') {
        continue;
      }
      $func = $module .'_cart_item';
      $func('load', $item);
    }
  }
  return $item;
}

/*
 * uc_wishlist_update_purchase is used from uc_wishlist_order to 
 * update the data on the purchases of a wish list item.
 * 
 */
function uc_wishlist_update_purchase($witem) {
  if ($witem->wpid && is_array($witem->purchase)) {
    $rv = db_query("UPDATE {uc_wishlist_products} SET purchase = '%s' WHERE wpid = %d", serialize($witem->purchase), $witem->wpid);
  }
}

/**
 * Creates a new wishlist for the current authenticated or anonymous user.
 */
function uc_wishlist_create_wishlist($title = NULL) {
  global $user;

  if ($user->uid) {
    $uid = $user->uid;
  }
  else {
    if (!variable_get('uc_wishlist_allow_anonymous', 0)) {
      drupal_set_message(t('You must be logged in to create a wish list. Please !login or !register for a new account.', array('!login' => l(t('login'), 'user', array(), drupal_get_destination()), '!register' => l(t('register'), 'user/register', array(), drupal_get_destination()))), 'error');
      return FALSE;
    }
    $uid = session_id();
  }

  if (!$title || $title === NULL) {
    $title = variable_get('uc_wishlist_default_title', "%user's wish list");
  }
  if (strpos($title, '%user') !== FALSE) {
    $uname = ($user->name) ? $user->name : variable_get('anonymous', t('Anonymous'));
    $title = str_replace('%user', $uname, $title);
  }

  $date = time() + variable_get('uc_wishlist_default_length', 2592000);

  $wid = db_next_id('{uc_wishlists}_wid');
  $res = db_query("INSERT INTO {uc_wishlists} (wid, uid, title, date) VALUES (%d, '%s', '%s', %d)", $wid, $uid, $title, $date);
  if ($res) {
    return $wid;
  }
  return FALSE;
}

function uc_wishlist_update_wishlist($wid, $title, $date, $address) {
//TODO combine with uc_wishlist_create_wishlist?
  $addrstr = serialize($address);
  db_query("UPDATE {uc_wishlists} SET title = '%s', date = %d, address = '%s' WHERE wid = %d", $title, $date, $addrstr, $wid);
}

/**
 * Adds an item to a user's wish list.
 */
function uc_wishlist_add_item($nid, $qty = 1, $data = NULL, $wid = NULL, $msg = TRUE, $check_redirect = TRUE) {
  $wid = $wid ? $wid : uc_wishlist_get_current_id();
  $created = FALSE;

  if (!$wid || $wid === NULL) {
    $wid = uc_wishlist_create_wishlist();
    if (!$wid) {
      drupal_set_message(t('Could not create wish list. Adding item failed.'), 'error');
      return FALSE;
    }
    $created = TRUE;
  }

  $node = node_load($nid);

  if (is_null($data)) {
    $data = array('module' => 'uc_product');
  }

  if (!in_array($node->type, array_keys(uc_product_node_info()))) {
    drupal_set_message(t('!title is not a product. Unable to add to wish list.', array('!title' => $node->title)), 'error');
    return;
  }

  $result = module_invoke_all('add_to_cart', $nid, $qty, $data);
  if (is_array($result) && !empty($result)) {
    foreach ($result as $row) {
      if ($row['success'] === FALSE) {
        if (isset($row['message']) && !empty($row['message'])) {
          $message = $row['message'];
        }
        else {
          $message = t('Sorry, that item is not available for purchase at this time.');
        }
        drupal_set_message($message, 'error');
        return;
      }
    }
  }

  $item = db_fetch_object(db_query("SELECT * FROM {uc_wishlist_products} WHERE wid = %d AND nid = %d AND data = '%s'", $wid, $node->nid, serialize($data)));

  // If the item isn't in the cart yet, add it.
  if (is_null($item) || $item === FALSE) {
    $wpid = db_next_id('{uc_wishlist_products}_wpid');
    db_query("INSERT INTO {uc_wishlist_products} (wpid, wid, nid, qty, changed, data, purchase) VALUES (%d, %d, %d, %d, %d, '%s', '')", $wpid, $wid, $node->nid, $qty, time(), serialize($data));
    if ($msg) {
      drupal_set_message(t('<b>!product-title</b> added to <a href="!url">your wish list</a>.', array('!product-title' => $node->title, '!url' => url('wishlist'))));
    }
  }
  else {
    // Update the item instead.
    if ($msg) {
      drupal_set_message(t('Your item(s) have been updated.'));
    }
    $qty += $item->qty;
    $wpid = $item->wpid;
    module_invoke($data['module'], 'update_wishlist_item', $node->nid, $data, min($qty, 999999), 0, $wid, $wpid);
  }

  cache_clear_all();

  if ($check_redirect) {
    if (isset($_GET['destination'])) {
      drupal_goto();
    }
  }
  if ($created) {
    drupal_goto('wishlist');
  }
}

/**
 * Remove an item from the wish list
 */
function uc_wishlist_remove_item($wpid) {
  db_query("DELETE FROM {uc_wishlist_products} WHERE wpid = %d", $wpid);
  cache_clear_all();
}

/**
 * Updates the quantity of all the items in a cart object
 */
function uc_wishlist_update_item_object($wform) {
  if (is_object($wform)) {
    if ($wform->wid) {
      $wid = $wform->wid;
    }
    else {
      $wid = uc_wishlist_get_current_id();
    }
    foreach ($wform->items as $item) {
      $data = unserialize($item['data']);
      $wpid = $data['wpid'];
      if ($item['remove']) {
        module_invoke($item['module'], 'update_wishlist_item', $item['nid'], $data, 0, 0, $wid, $wpid);
      }
      else {
	  	$res = db_query('SELECT * FROM {uc_wishlist_products} WHERE wpid = %d and wid = %d', $wpid, $wid);
	  	$pitem = db_fetch_object($res);
	  	$pitem->purchase=unserialize($pitem->purchase);
	  	$qtypurchase=0;
	  	if(is_array($pitem->purchase))
	  	{
	  		$qtypurchase=count($pitem->purchase);
	  	}
	  	if(user_access('administer wishlists'))
	  	{
      		module_invoke($item['module'], 'update_wishlist_item', $item['nid'], $data, $item['wantqty'], $item['haveqty']-$qtypurchase, $wid, $wpid);
	  	}else
	  	{
	  		module_invoke($item['module'], 'update_wishlist_item', $item['nid'], $data, $item['wantqty'], $pitem->qty_purchase, $wid, $wpid);
	  	}
      }
    }
  }
}

function uc_wishlist_add_items_to_cart($form_values) {
  if (is_object($form_values)) {
    if ($form_values->wid) {
      $wid = $form_values->wid;
    }
    else {
      $wid = uc_wishlist_get_current_id();
    }
    foreach ($form_values->items as $item) {
      if ($item['qty']>0) {
//TODO: add attribute information 'gift to user' that shows up on receipts
// see uc_wishlist_cart_item
        $data = unserialize($item['data']);
        uc_cart_add_item($item['nid'], $item['qty'], $data);
      }
    }
  }
}

/**
 * Empties a wish list of its contents.
 */
function uc_wishlist_empty($wid) {
  if (is_null($wid) || empty($wid)) {
    return;
  }
  db_query("DELETE FROM {uc_wishlist_products} WHERE wid = %d", $wid);
  db_query("DELETE FROM {uc_wishlists} WHERE wid = %d", $wid);
}

function uc_wishlist_wishlist_pane_list($items, $wid, $own) {
  $panes = module_invoke_all('wishlist_pane', $items, $wid, $own);
  if (!is_array($panes) || count($panes) == 0) {
    return array();
  }
  for ($i = 0; $i < count($panes); $i++) {
    $panes[$i]['enabled'] = variable_get('uc_cap_'. $panes[$i]['id'] .'_enabled', (!isset($panes[$i]['enabled']) ? TRUE : $panes[$i]['enabled']));
    $panes[$i]['weight'] = variable_get('uc_cap_'. $panes[$i]['id'] .'_weight', (!isset($panes[$i]['weight']) ? 0 : $panes[$i]['weight']));
  }
  usort($panes, 'uc_weight_sort');

  return $panes;
}

